// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ulid from "ulid";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as OtherJsx from "./other.jsx";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function mapRange(n, f) {
  return Core__Array.make(n, 0).map(function (param, i) {
              return f(i);
            });
}

function bound(left, right, v) {
  return Math.max(left, Math.min(right, v));
}

function hueToName(hue) {
  if (hue >= 5 && hue < 15) {
    return "rose";
  } else if (hue >= 15 && hue < 25) {
    return "crimson";
  } else if (hue >= 25 && hue < 35) {
    return "red";
  } else if (hue >= 35 && hue < 45) {
    return "vermillion";
  } else if (hue >= 45 && hue < 55) {
    return "persimmon";
  } else if (hue >= 55 && hue < 65) {
    return "orange";
  } else if (hue >= 65 && hue < 75) {
    return "pumpkin";
  } else if (hue >= 75 && hue < 85) {
    return "mango";
  } else if (hue >= 85 && hue < 95) {
    return "amber";
  } else if (hue >= 95 && hue < 105) {
    return "gold";
  } else if (hue >= 105 && hue < 115) {
    return "yellow";
  } else if (hue >= 115 && hue < 125) {
    return "citron";
  } else if (hue >= 125 && hue < 135) {
    return "pear";
  } else if (hue >= 135 && hue < 145) {
    return "chartreuse";
  } else if (hue >= 145 && hue < 155) {
    return "lime";
  } else if (hue >= 155 && hue < 165) {
    return "green";
  } else if (hue >= 165 && hue < 175) {
    return "emerald";
  } else if (hue >= 175 && hue < 185) {
    return "mint";
  } else if (hue >= 185 && hue < 195) {
    return "sea";
  } else if (hue >= 195 && hue < 205) {
    return "teal";
  } else if (hue >= 205 && hue < 215) {
    return "cyan";
  } else if (hue >= 215 && hue < 225) {
    return "pacific";
  } else if (hue >= 225 && hue < 235) {
    return "cerulean";
  } else if (hue >= 235 && hue < 245) {
    return "capri";
  } else if (hue >= 245 && hue < 255) {
    return "sky";
  } else if (hue >= 255 && hue < 265) {
    return "blue";
  } else if (hue >= 265 && hue < 275) {
    return "sapphire";
  } else if (hue >= 275 && hue < 285) {
    return "indigo";
  } else if (hue >= 285 && hue < 295) {
    return "veronica";
  } else if (hue >= 295 && hue < 305) {
    return "violet";
  } else if (hue >= 305 && hue < 315) {
    return "amethyst";
  } else if (hue >= 315 && hue < 325) {
    return "purple";
  } else if (hue >= 325 && hue < 335) {
    return "plum";
  } else if (hue >= 335 && hue < 345) {
    return "fuchsia";
  } else if (hue >= 345 && hue < 355) {
    return "magenta";
  } else if (hue >= 355 || hue < 5) {
    return "pink";
  } else {
    return "?";
  }
}

function updateHueLineCanvas(canvas, ctx) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  for(var x = 0; x <= xMax; ++x){
    var rgb = Color.convert([
          x / xMax * 360,
          1.0,
          1.0
        ], Color.OKHSV, Color.sRGB);
    ctx.fillStyle = Color.RGBToHex(rgb);
    ctx.fillRect(x, 0, 1, yMax);
  }
}

function App$HueLine(props) {
  var selected = props.selected;
  var canvasRef = React.useRef(null);
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            canvasDom.width = 500;
            canvasDom.height = 20;
            updateHueLineCanvas(canvasDom, context);
          }
        }), [canvasRef.current]);
  return JsxRuntime.jsxs("div", {
              children: [
                props.hues.map(function (hue) {
                      return JsxRuntime.jsx("div", {
                                  className: [
                                      "w-2 h-2 absolute border-black border",
                                      Core__Option.mapOr(selected, false, (function (s) {
                                              return s === hue.id;
                                            })) ? "bg-green-500" : "bg-black"
                                    ].join(" "),
                                  style: {
                                    left: (hue.value / 360 * 500 | 0).toString() + "px"
                                  }
                                });
                    }),
                JsxRuntime.jsx("canvas", {
                      ref: Caml_option.some(canvasRef)
                    })
              ],
              className: "w-fit relative"
            });
}

function updateLchHGamutCanvas(canvas, ctx, hue) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  for(var x = 0; x <= xMax; ++x){
    for(var y = 0; y <= yMax; ++y){
      var l = x / xMax;
      var c = y / yMax * 0.36;
      var rgb = Color.convert([
            l,
            c,
            hue
          ], Color.OKLCH, Color.sRGB);
      if (Color.isRGBInGamut(rgb)) {
        ctx.fillStyle = Color.RGBToHex(rgb);
        ctx.fillRect(x, yMax - y | 0, 1, 1);
      }
      
    }
  }
}

function App$LchHGamut(props) {
  var selectedElement = props.selectedElement;
  var selectedHue = props.selectedHue;
  var hues = props.hues;
  var canvasRef = React.useRef(null);
  var hueObj = Core__Option.flatMap(selectedHue, (function (s) {
          return hues.find(function (v) {
                      return v.id === s;
                    });
        }));
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            if (hueObj !== undefined) {
              canvasDom.width = 300;
              canvasDom.height = 300;
              updateLchHGamutCanvas(canvasDom, context, hueObj.value);
            } else {
              context.clearRect(0, 0, 300, 300);
            }
          }
        }), [
        canvasRef.current,
        selectedHue
      ]);
  return JsxRuntime.jsxs("div", {
              children: [
                Core__Option.mapOr(hueObj, null, (function (hue) {
                        return hue.elements.map(function (e) {
                                    var hsl_0 = hue.value;
                                    var hsl_1 = e.saturation;
                                    var hsl_2 = e.lightness;
                                    var hsl = [
                                      hsl_0,
                                      hsl_1,
                                      hsl_2
                                    ];
                                    var match = Color.convert(hsl, Color.OKHSL, Color.OKLCH);
                                    var hex = Color.RGBToHex(Color.convert(hsl, Color.OKHSL, Color.sRGB));
                                    return JsxRuntime.jsx("div", {
                                                children: Core__Option.mapOr(selectedElement, false, (function (x) {
                                                        return x === e.id;
                                                      })) ? "â€¢" : null,
                                                className: "absolute w-5 h-5 border border-black flex flex-row items-center justify-center",
                                                style: {
                                                  backgroundColor: hex,
                                                  bottom: (match[1] / 0.36 * 300 | 0).toString() + "px",
                                                  left: (match[0] * 300 | 0).toString() + "px"
                                                }
                                              });
                                  });
                      })),
                JsxRuntime.jsx("canvas", {
                      ref: Caml_option.some(canvasRef)
                    })
              ],
              className: "w-fit relative bg-black"
            });
}

function updateHslSGamutCanvas(canvas, ctx) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  for(var x = 0; x <= xMax; ++x){
    for(var y = 0; y <= yMax; ++y){
      var h = y / yMax * 360;
      var l = x / xMax;
      var rgb = Color.convert([
            h,
            0.0,
            l
          ], Color.OKHSL, Color.sRGB);
      ctx.fillStyle = Color.RGBToHex(rgb);
      ctx.fillRect(x, y, 1, 1);
    }
  }
}

function App$HslSGamut(props) {
  var selectedElement = props.selectedElement;
  var selectedHue = props.selectedHue;
  var hues = props.hues;
  var canvasRef = React.useRef(null);
  var hueObj = Core__Option.flatMap(selectedHue, (function (s) {
          return hues.find(function (v) {
                      return v.id === s;
                    });
        }));
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            if (hueObj !== undefined) {
              canvasDom.width = 300;
              canvasDom.height = 300;
              updateHslSGamutCanvas(canvasDom, context);
            } else {
              context.clearRect(0, 0, 300, 300);
            }
          }
        }), [
        canvasRef.current,
        selectedHue
      ]);
  return JsxRuntime.jsxs("div", {
              children: [
                Core__Option.isNone(selectedHue) ? null : Belt_Array.concatMany(hues.map(function (hue) {
                            return hue.elements.map(function (e) {
                                        var hex = Color.RGBToHex(Color.convert([
                                                  hue.value,
                                                  e.saturation,
                                                  e.lightness
                                                ], Color.OKHSL, Color.sRGB));
                                        return JsxRuntime.jsx("div", {
                                                    children: Core__Option.mapOr(selectedElement, false, (function (x) {
                                                            return x === e.id;
                                                          })) ? "â€¢" : null,
                                                    className: "absolute w-5 h-5 border border-black flex flex-row items-center justify-center",
                                                    style: {
                                                      backgroundColor: hex,
                                                      left: (e.lightness * 300 | 0).toString() + "px",
                                                      top: (hue.value / 360 * 300 | 0).toString() + "px"
                                                    }
                                                  });
                                      });
                          })),
                JsxRuntime.jsx("canvas", {
                      ref: Caml_option.some(canvasRef)
                    })
              ],
              className: "w-fit relative border border-black"
            });
}

function makeDefaultPicks(xLen, defaultShades) {
  var yLenF = defaultShades.length;
  return mapRange(xLen, (function (x) {
                var hue = x / xLen * 360 + 1;
                var hueId = Ulid.ulid();
                var elements = defaultShades.map(function (shade, y) {
                      var s = (y + 1) / yLenF;
                      var match = Color.convert([
                            hue,
                            s,
                            1.0
                          ], Color.OKHSV, Color.OKHSL);
                      return {
                              id: Ulid.ulid(),
                              shadeId: shade.id,
                              hueId: hueId,
                              lightness: match[2],
                              saturation: match[1]
                            };
                    });
                return {
                        id: hueId,
                        value: hue,
                        name: hueToName(hue),
                        elements: elements
                      };
              }));
}

var defaultShades = mapRange(5, (function (i) {
        return {
                id: Ulid.ulid(),
                name: Math.imul(i + 1 | 0, 100).toString()
              };
      }));

var defaultPicks = makeDefaultPicks(5, defaultShades);

function App$Palette(props) {
  var match = React.useState(function () {
        return defaultPicks;
      });
  var setPicks = match[1];
  var match$1 = React.useState(function () {
        return defaultShades;
      });
  var setShades = match$1[1];
  var shades = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSelectedHue = match$2[1];
  var selectedHue = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setSelectedElement = match$3[1];
  var selectedElement = match$3[0];
  var handleKeydown = React.useCallback((function ($$event) {
          var update = function (f) {
            Core__Option.mapOr(selectedElement, undefined, (function (e) {
                    setPicks(function (p_) {
                          return p_.map(function (hue) {
                                      return {
                                              id: hue.id,
                                              value: hue.value,
                                              name: hue.name,
                                              elements: hue.elements.map(function (hueElement) {
                                                    if (hueElement.id === e) {
                                                      return f(hueElement);
                                                    } else {
                                                      return hueElement;
                                                    }
                                                  })
                                            };
                                    });
                        });
                  }));
          };
          var match = $$event.key;
          switch (match) {
            case "ArrowDown" :
                update(function (el) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: el.lightness,
                              saturation: Math.max(0.0, el.saturation - 0.01)
                            };
                    });
                $$event.preventDefault();
                return ;
            case "ArrowLeft" :
                update(function (el) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: Math.max(0.0, el.lightness - 0.01),
                              saturation: el.saturation
                            };
                    });
                $$event.preventDefault();
                return ;
            case "ArrowRight" :
                update(function (el) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: Math.min(1.0, el.lightness + 0.01),
                              saturation: el.saturation
                            };
                    });
                $$event.preventDefault();
                return ;
            case "ArrowUp" :
                update(function (el) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: el.lightness,
                              saturation: Math.min(1.0, el.saturation + 0.01)
                            };
                    });
                $$event.preventDefault();
                return ;
            default:
              return ;
          }
        }), [selectedElement]);
  React.useEffect((function () {
          document.addEventListener("keydown", handleKeydown);
          return (function () {
                    document.removeEventListener("keydown", handleKeydown);
                  });
        }), [selectedElement]);
  var picks = match[0].toSorted(function (a, b) {
        return a.value - b.value;
      });
  var hueLen = picks.length;
  var shadeLen = shades.length;
  var makeNewHue = function (copy, left, right) {
    var newValue = (left + right) / 2;
    var hueId = Ulid.ulid();
    return {
            id: hueId,
            value: newValue,
            name: hueToName(newValue),
            elements: copy.elements.map(function (v) {
                  return {
                          id: Ulid.ulid(),
                          shadeId: v.shadeId,
                          hueId: hueId,
                          lightness: v.lightness,
                          saturation: v.saturation
                        };
                })
          };
  };
  var newEndHue = function () {
    setPicks(function (p_) {
          var lastHue = picks.toReversed()[0];
          var $$new = makeNewHue(lastHue, lastHue.value, 360);
          return Belt_Array.concatMany([
                      p_,
                      [$$new]
                    ]);
        });
  };
  var newEndShade = function () {
    var newShadeId = Ulid.ulid();
    setShades(function (s_) {
          return Belt_Array.concatMany([
                      s_,
                      [{
                          id: newShadeId,
                          name: "New"
                        }]
                    ]);
        });
    setPicks(function (p_) {
          return p_.map(function (v) {
                      return {
                              id: v.id,
                              value: v.value,
                              name: v.name,
                              elements: Core__Array.reduceWithIndex(v.elements, [], (function (a, c, i) {
                                      if (i === (v.elements.length - 1 | 0)) {
                                        return Belt_Array.concatMany([
                                                    a,
                                                    [
                                                      c,
                                                      {
                                                        id: Ulid.ulid(),
                                                        shadeId: newShadeId,
                                                        hueId: v.id,
                                                        lightness: bound(0.0, 1.0, (c.lightness + 1.0) / 2),
                                                        saturation: bound(0.0, 1.0, (c.saturation + 1.0) / 2)
                                                      }
                                                    ]
                                                  ]);
                                      } else {
                                        return Belt_Array.concatMany([
                                                    a,
                                                    [c]
                                                  ]);
                                      }
                                    }))
                            };
                    });
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(App$HueLine, {
                      hues: picks,
                      selected: selectedHue
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(App$LchHGamut, {
                              hues: picks,
                              selectedHue: selectedHue,
                              selectedElement: selectedElement
                            }),
                        JsxRuntime.jsx(App$HslSGamut, {
                              hues: picks,
                              selectedHue: selectedHue,
                              selectedElement: selectedElement
                            })
                      ],
                      className: "flex flex-row gap-2 py-2"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("button", {
                                    className: "w-5 h-5 bg-black rounded-tr-full rounded-tl-full rounded-br-full",
                                    onClick: (function (param) {
                                        newEndShade();
                                      })
                                  }),
                              className: "flex flex-col justify-end",
                              style: {
                                gridColumn: "-1 / -2",
                                gridRow: "1 / 2"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("button", {
                                    className: "w-5 h-5 bg-black rounded-bl-full rounded-tl-full rounded-br-full",
                                    onClick: (function (param) {
                                        newEndHue();
                                      })
                                  }),
                              className: "flex flex-col items-end",
                              style: {
                                gridColumn: "1 / 2",
                                gridRow: "-1 / -2"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: picks.map(function (pick) {
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("input", {
                                                                className: "w-20 h-5",
                                                                type: "text",
                                                                value: pick.name,
                                                                onChange: (function (e) {
                                                                    var value = e.target.value;
                                                                    setPicks(function (cur) {
                                                                          return cur.map(function (v) {
                                                                                      if (v.id === pick.id) {
                                                                                        return {
                                                                                                id: v.id,
                                                                                                value: v.value,
                                                                                                name: value,
                                                                                                elements: v.elements
                                                                                              };
                                                                                      } else {
                                                                                        return v;
                                                                                      }
                                                                                    });
                                                                        });
                                                                  })
                                                              }),
                                                          JsxRuntime.jsx("button", {
                                                                className: "w-5 h-5 bg-black rounded-bl-full rounded-tl-full rounded-br-full",
                                                                onClick: (function (param) {
                                                                    setPicks(function (p_) {
                                                                          return Core__Array.reduceWithIndex(p_, [], (function (acc, cur, i) {
                                                                                        var leftValue = i === 0 ? 0 : p_[i - 1 | 0].value;
                                                                                        if (cur.id === pick.id) {
                                                                                          return Belt_Array.concatMany([
                                                                                                      acc,
                                                                                                      [
                                                                                                        makeNewHue(cur, leftValue, cur.value),
                                                                                                        cur
                                                                                                      ]
                                                                                                    ]);
                                                                                        } else {
                                                                                          return Belt_Array.concatMany([
                                                                                                      acc,
                                                                                                      [cur]
                                                                                                    ]);
                                                                                        }
                                                                                      }));
                                                                        });
                                                                  })
                                                              })
                                                        ],
                                                        className: "flex-row flex w-full justify-between"
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("button", {
                                                                className: [
                                                                    "w-3 h-3 border-black border",
                                                                    Core__Option.mapOr(selectedHue, false, (function (s) {
                                                                            return s === pick.id;
                                                                          })) ? "bg-green-500" : "bg-black"
                                                                  ].join(" "),
                                                                onClick: (function (param) {
                                                                    setSelectedHue(function (param) {
                                                                          return pick.id;
                                                                        });
                                                                  })
                                                              }),
                                                          JsxRuntime.jsx("button", {
                                                                className: "w-3 h-3 bg-red-500",
                                                                onClick: (function (param) {
                                                                    setPicks(function (p_) {
                                                                          return p_.filter(function (v) {
                                                                                      return v.id !== pick.id;
                                                                                    });
                                                                        });
                                                                    setSelectedHue(function (v) {
                                                                          return Core__Option.flatMap(v, (function (p) {
                                                                                        if (p === pick.id) {
                                                                                          return ;
                                                                                        } else {
                                                                                          return p;
                                                                                        }
                                                                                      }));
                                                                        });
                                                                  })
                                                              })
                                                        ],
                                                        className: "flex flex-row justify-start gap-2 w-full"
                                                      })
                                                ],
                                                className: " "
                                              }, pick.id);
                                  }),
                              className: "overflow-hidden",
                              style: {
                                display: "grid",
                                gridColumn: "1 / 2",
                                gridRow: "2 / -2",
                                gridTemplateColumns: "subgrid",
                                gridTemplateRows: "subgrid"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: shades.map(function (shade) {
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("input", {
                                                        className: "w-10 h-5",
                                                        type: "text",
                                                        value: shade.name,
                                                        onChange: (function (e) {
                                                            var value = e.target.value;
                                                            setShades(function (cur) {
                                                                  return cur.map(function (v) {
                                                                              if (v.id === shade.id) {
                                                                                return {
                                                                                        id: v.id,
                                                                                        name: value
                                                                                      };
                                                                              } else {
                                                                                return v;
                                                                              }
                                                                            });
                                                                });
                                                          })
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("button", {
                                                                className: "w-5 h-5 bg-black rounded-tr-full rounded-tl-full rounded-br-full",
                                                                onClick: (function (param) {
                                                                    var newShadeId = Ulid.ulid();
                                                                    setShades(function (s_) {
                                                                          return Core__Array.reduce(s_, [], (function (a, c) {
                                                                                        if (c.id === shade.id) {
                                                                                          return Belt_Array.concatMany([
                                                                                                      a,
                                                                                                      [
                                                                                                        {
                                                                                                          id: newShadeId,
                                                                                                          name: "New"
                                                                                                        },
                                                                                                        c
                                                                                                      ]
                                                                                                    ]);
                                                                                        } else {
                                                                                          return Belt_Array.concatMany([
                                                                                                      a,
                                                                                                      [c]
                                                                                                    ]);
                                                                                        }
                                                                                      }));
                                                                        });
                                                                    setPicks(function (p_) {
                                                                          return p_.map(function (hue) {
                                                                                      return {
                                                                                              id: hue.id,
                                                                                              value: hue.value,
                                                                                              name: hue.name,
                                                                                              elements: Core__Array.reduceWithIndex(hue.elements, [], (function (a, c, i) {
                                                                                                      if (c.shadeId !== shade.id) {
                                                                                                        return Belt_Array.concatMany([
                                                                                                                    a,
                                                                                                                    [c]
                                                                                                                  ]);
                                                                                                      }
                                                                                                      var match = i === 0 ? [
                                                                                                          0.0,
                                                                                                          0.0
                                                                                                        ] : (function (x) {
                                                                                                              return [
                                                                                                                      x.saturation,
                                                                                                                      x.lightness
                                                                                                                    ];
                                                                                                            })(hue.elements[i - 1 | 0]);
                                                                                                      return Belt_Array.concatMany([
                                                                                                                  a,
                                                                                                                  [
                                                                                                                    {
                                                                                                                      id: Ulid.ulid(),
                                                                                                                      shadeId: newShadeId,
                                                                                                                      hueId: hue.id,
                                                                                                                      lightness: bound(0.0, 1.0, (match[1] + c.lightness) / 2),
                                                                                                                      saturation: bound(0.0, 1.0, (match[0] + c.saturation) / 2)
                                                                                                                    },
                                                                                                                    c
                                                                                                                  ]
                                                                                                                ]);
                                                                                                    }))
                                                                                            };
                                                                                    });
                                                                        });
                                                                  })
                                                              }),
                                                          JsxRuntime.jsx("button", {
                                                                className: "w-3 h-3 bg-red-500",
                                                                onClick: (function (param) {
                                                                    setPicks(function (p_) {
                                                                          return p_.map(function (v) {
                                                                                      return {
                                                                                              id: v.id,
                                                                                              value: v.value,
                                                                                              name: v.name,
                                                                                              elements: v.elements.filter(function (e) {
                                                                                                    return e.shadeId !== shade.id;
                                                                                                  })
                                                                                            };
                                                                                    });
                                                                        });
                                                                    setShades(function (s_) {
                                                                          return s_.filter(function (v) {
                                                                                      return v.id !== shade.id;
                                                                                    });
                                                                        });
                                                                  })
                                                              })
                                                        ],
                                                        className: "flex flex-row justify-between"
                                                      })
                                                ],
                                                className: " flex flex-col"
                                              }, shade.id);
                                  }),
                              className: "overflow-hidden",
                              style: {
                                display: "grid",
                                gridColumn: "2 / -2",
                                gridRow: "1 / 2",
                                gridTemplateColumns: "subgrid",
                                gridTemplateRows: "subgrid"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: Belt_Array.concatMany(picks.map(function (hue) {
                                        return hue.elements.map(function (element) {
                                                    var hex = Color.RGBToHex(Color.convert([
                                                              hue.value,
                                                              element.saturation,
                                                              element.lightness
                                                            ], Color.OKHSL, Color.sRGB));
                                                    return JsxRuntime.jsx("div", {
                                                                children: Core__Option.mapOr(selectedElement, false, (function (e) {
                                                                        return e === element.id;
                                                                      })) ? "â€¢" : null,
                                                                className: "w-10 h-10 max-h-10 max-w-10 flex flex-row items-center justify-center text-xl cursor-pointer",
                                                                style: {
                                                                  backgroundColor: hex
                                                                },
                                                                onClick: (function (param) {
                                                                    setSelectedElement(function (param) {
                                                                          return element.id;
                                                                        });
                                                                    setSelectedHue(function (param) {
                                                                          return element.hueId;
                                                                        });
                                                                  })
                                                              }, element.id);
                                                  });
                                      })),
                              style: {
                                display: "grid",
                                gridColumn: "2 / -2",
                                gridRow: "2 / -2",
                                gridTemplateColumns: "subgrid",
                                gridTemplateRows: "subgrid"
                              }
                            })
                      ],
                      className: "py-6 w-fit",
                      style: {
                        display: "grid",
                        gridTemplateColumns: "auto repeat(" + shadeLen.toString() + ", 2.5rem) 2.5rem",
                        gridTemplateRows: "auto repeat(" + hueLen.toString() + ", 2.5rem) 2.5rem"
                      }
                    })
              ]
            });
}

function App(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(App$Palette, {
                    arr: []
                  }),
              className: "p-6 "
            });
}

var make = App;

export {
  make ,
}
/*  Not a pure module */

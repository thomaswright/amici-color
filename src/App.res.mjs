// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ulid from "ulid";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as XStack from "./XStack.res.mjs";
import * as YStack from "./YStack.res.mjs";
import * as ViewGamut from "./ViewGamut.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import DropdownJsx from "./Dropdown.jsx";
import * as JsxRuntime from "react/jsx-runtime";
import AmiciPrismSvgreact from "./assets/amici-prism.svg?react";

var make = AmiciPrismSvgreact;

var make$1 = DropdownJsx;

function makeDefaultPicks(xLen, defaultShades) {
  var yLenF = defaultShades.length;
  return Common.Utils.mapRange(xLen, (function (x) {
                var hue = x / xLen * 360 + 1;
                var hueId = Ulid.ulid();
                var elements = defaultShades.map(function (shade, y) {
                      var s = (y + 1) / yLenF;
                      var match = Color.convert([
                            hue,
                            s,
                            1.0
                          ], Color.OKHSV, Color.OKHSL);
                      return {
                              id: Ulid.ulid(),
                              shadeId: shade.id,
                              hueId: hueId,
                              lightness: match[2],
                              saturation: match[1]
                            };
                    });
                return {
                        id: hueId,
                        value: hue,
                        name: Common.hueToName(hue),
                        elements: elements
                      };
              }));
}

function viewName(view) {
  switch (view) {
    case "View_LC" :
        return "oklch";
    case "View_SV" :
        return "okhsv";
    case "View_SL" :
        return "okhsl";
    
  }
}

var defaultShades = Common.Utils.mapRange(5, (function (i) {
        return {
                id: Ulid.ulid(),
                name: Math.imul(i + 1 | 0, 100).toString()
              };
      }));

var defaultPicks = makeDefaultPicks(5, defaultShades);

function App$Palette(props) {
  var match = React.useState(function () {
        return "View_LC";
      });
  var setView = match[1];
  var view = match[0];
  var match$1 = React.useState(function () {
        return defaultPicks;
      });
  var setPicks = match$1[1];
  var match$2 = React.useState(function () {
        return defaultShades;
      });
  var setShades = match$2[1];
  var shades = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setSelectedHue = match$3[1];
  var selectedHue = match$3[0];
  var match$4 = React.useState(function () {
        
      });
  var setSelectedElement = match$4[1];
  var selectedElement = match$4[0];
  var handleKeydown = React.useCallback((function ($$event) {
          var updateElement = function (f) {
            Core__Option.mapOr(selectedElement, undefined, (function (e) {
                    setPicks(function (p_) {
                          return p_.map(function (hue) {
                                      return {
                                              id: hue.id,
                                              value: hue.value,
                                              name: hue.name,
                                              elements: hue.elements.map(function (hueElement) {
                                                      if (hueElement.id === e) {
                                                        return f(hueElement, hue.value);
                                                      } else {
                                                        return hueElement;
                                                      }
                                                    }).toSorted(function (a, b) {
                                                    return b.lightness - a.lightness;
                                                  })
                                            };
                                    });
                        });
                  }));
          };
          var updateHue = function (f) {
            Core__Option.mapOr(selectedHue, undefined, (function (selectedHue_) {
                    setPicks(function (p_) {
                          return p_.map(function (hue) {
                                      if (hue.id === selectedHue_) {
                                        return {
                                                id: hue.id,
                                                value: Common.Utils.bound(f(hue.value), 0, 360),
                                                name: hue.name,
                                                elements: hue.elements
                                              };
                                      } else {
                                        return hue;
                                      }
                                    });
                        });
                  }));
          };
          var match = $$event.key;
          switch (match) {
            case "ArrowDown" :
                updateElement(function (el, param) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: el.lightness,
                              saturation: Math.max(0.0, el.saturation - 0.01)
                            };
                    });
                $$event.preventDefault();
                return ;
            case "ArrowLeft" :
                switch (view) {
                  case "View_LC" :
                      updateElement(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKLCH);
                            var newL = Math.max(0.0, match[0] - 0.01);
                            var match$1 = Color.convert([
                                  newL,
                                  match[1],
                                  match[2]
                                ], Color.OKLCH, Color.OKHSL);
                            var outputL = match$1[2];
                            var outputS = match$1[1];
                            var rgb = Color.convert([
                                  hue,
                                  outputS,
                                  outputL
                                ], Color.OKHSL, Color.sRGB);
                            if (Color.isRGBInGamut(rgb)) {
                              return {
                                      id: el.id,
                                      shadeId: el.shadeId,
                                      hueId: el.hueId,
                                      lightness: outputL,
                                      saturation: outputS
                                    };
                            } else {
                              return el;
                            }
                          });
                      break;
                  case "View_SV" :
                      updateElement(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKHSV);
                            var newV = Math.max(0.0, match[2] - 0.01);
                            var match$1 = Color.convert([
                                  hue,
                                  match[1],
                                  newV
                                ], Color.OKHSV, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: match$1[1]
                                  };
                          });
                      break;
                  case "View_SL" :
                      updateElement(function (el, param) {
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: Math.max(0.0, el.lightness - 0.01),
                                    saturation: el.saturation
                                  };
                          });
                      break;
                  
                }
                $$event.preventDefault();
                return ;
            case "ArrowRight" :
                switch (view) {
                  case "View_LC" :
                      updateElement(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKLCH);
                            var newL = Math.min(1.0, match[0] + 0.01);
                            var match$1 = Color.convert([
                                  newL,
                                  match[1],
                                  match[2]
                                ], Color.OKLCH, Color.OKHSL);
                            var outputL = match$1[2];
                            var outputS = match$1[1];
                            var rgb = Color.convert([
                                  hue,
                                  outputS,
                                  outputL
                                ], Color.OKHSL, Color.sRGB);
                            if (Color.isRGBInGamut(rgb)) {
                              return {
                                      id: el.id,
                                      shadeId: el.shadeId,
                                      hueId: el.hueId,
                                      lightness: outputL,
                                      saturation: outputS
                                    };
                            } else {
                              return el;
                            }
                          });
                      break;
                  case "View_SV" :
                      updateElement(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKHSV);
                            var newV = Math.min(1.0, match[2] + 0.01);
                            var match$1 = Color.convert([
                                  hue,
                                  match[1],
                                  newV
                                ], Color.OKHSV, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: match$1[1]
                                  };
                          });
                      break;
                  case "View_SL" :
                      updateElement(function (el, param) {
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: Math.min(1.0, el.lightness + 0.01),
                                    saturation: el.saturation
                                  };
                          });
                      break;
                  
                }
                $$event.preventDefault();
                return ;
            case "ArrowUp" :
                updateElement(function (el, param) {
                      return {
                              id: el.id,
                              shadeId: el.shadeId,
                              hueId: el.hueId,
                              lightness: el.lightness,
                              saturation: Math.min(1.0, el.saturation + 0.01)
                            };
                    });
                $$event.preventDefault();
                return ;
            case "d" :
                return updateHue(function (hue) {
                            var result = hue + 10.0;
                            if (result > 360) {
                              return result - 360;
                            } else {
                              return result;
                            }
                          });
            case "j" :
                return updateHue(function (hue) {
                            var result = hue + 1.0;
                            if (result > 360) {
                              return result - 360;
                            } else {
                              return result;
                            }
                          });
            case "k" :
                return updateHue(function (hue) {
                            var result = hue - 1.0;
                            if (result < 0) {
                              return result + 360;
                            } else {
                              return result;
                            }
                          });
            case "u" :
                return updateHue(function (hue) {
                            var result = hue - 10.0;
                            if (result < 0) {
                              return result + 360;
                            } else {
                              return result;
                            }
                          });
            default:
              return ;
          }
        }), [
        selectedElement,
        view
      ]);
  React.useEffect((function () {
          document.addEventListener("keydown", handleKeydown);
          return (function () {
                    document.removeEventListener("keydown", handleKeydown);
                  });
        }), [
        selectedElement,
        view
      ]);
  var picks = match$1[0].toSorted(function (a, b) {
        return a.value - b.value;
      });
  var hueLen = picks.length;
  var shadeLen = shades.length;
  var newHue = function (referenceHueId, isAfter) {
    setPicks(function (p_) {
          return Core__Option.mapOr(Core__Array.findIndexOpt(p_, (function (v) {
                            return v.id === referenceHueId;
                          })), p_, (function (pickIndex) {
                        var isFirst = pickIndex === 0;
                        var isLast = pickIndex === (p_.length - 1 | 0);
                        var match = isAfter ? (
                            isLast ? [
                                pickIndex,
                                undefined
                              ] : [
                                pickIndex,
                                pickIndex + 1 | 0
                              ]
                          ) : (
                            isFirst ? [
                                undefined,
                                pickIndex
                              ] : [
                                pickIndex - 1 | 0,
                                pickIndex
                              ]
                          );
                        var afterIndex = match[1];
                        var beforeIndex = match[0];
                        if (beforeIndex !== undefined) {
                          if (afterIndex !== undefined) {
                            var b = p_[beforeIndex];
                            var a = p_[afterIndex];
                            var newHueValue = (b.value + a.value) / 2;
                            var hueId = Ulid.ulid();
                            var newElement_name = Common.hueToName(newHueValue);
                            var newElement_elements = (
                                isAfter ? b.elements : a.elements
                              ).map(function (v) {
                                  var hueRef = isAfter ? b.value : a.value;
                                  var match = Color.convert([
                                        hueRef,
                                        v.saturation,
                                        v.lightness
                                      ], Color.OKHSL, Color.OKHSV);
                                  var match$1 = Color.convert([
                                        newHueValue,
                                        match[1],
                                        match[2]
                                      ], Color.OKHSV, Color.OKHSL);
                                  return {
                                          id: Ulid.ulid(),
                                          shadeId: v.shadeId,
                                          hueId: hueId,
                                          lightness: match$1[2],
                                          saturation: match$1[1]
                                        };
                                });
                            var newElement = {
                              id: hueId,
                              value: newHueValue,
                              name: newElement_name,
                              elements: newElement_elements
                            };
                            return p_.toSpliced(afterIndex, 0, newElement);
                          }
                          var b$1 = p_[beforeIndex];
                          var newHueValue$1 = (b$1.value + 360) / 2;
                          var hueId$1 = Ulid.ulid();
                          var newElement_name$1 = Common.hueToName(newHueValue$1);
                          var newElement_elements$1 = b$1.elements.map(function (v) {
                                var match = Color.convert([
                                      b$1.value,
                                      v.saturation,
                                      v.lightness
                                    ], Color.OKHSL, Color.OKHSV);
                                var match$1 = Color.convert([
                                      newHueValue$1,
                                      match[1],
                                      match[2]
                                    ], Color.OKHSV, Color.OKHSL);
                                return {
                                        id: Ulid.ulid(),
                                        shadeId: v.shadeId,
                                        hueId: hueId$1,
                                        lightness: match$1[2],
                                        saturation: match$1[1]
                                      };
                              });
                          var newElement$1 = {
                            id: hueId$1,
                            value: newHueValue$1,
                            name: newElement_name$1,
                            elements: newElement_elements$1
                          };
                          return p_.toSpliced(beforeIndex + 1 | 0, 0, newElement$1);
                        }
                        if (afterIndex === undefined) {
                          return p_;
                        }
                        var a$1 = p_[afterIndex];
                        var newHueValue$2 = (0 + a$1.value) / 2;
                        var hueId$2 = Ulid.ulid();
                        var newElement_name$2 = Common.hueToName(newHueValue$2);
                        var newElement_elements$2 = a$1.elements.map(function (v) {
                              var match = Color.convert([
                                    a$1.value,
                                    v.saturation,
                                    v.lightness
                                  ], Color.OKHSL, Color.OKHSV);
                              var match$1 = Color.convert([
                                    newHueValue$2,
                                    match[1],
                                    match[2]
                                  ], Color.OKHSV, Color.OKHSL);
                              return {
                                      id: Ulid.ulid(),
                                      shadeId: v.shadeId,
                                      hueId: hueId$2,
                                      lightness: match$1[2],
                                      saturation: match$1[1]
                                    };
                            });
                        var newElement$2 = {
                          id: hueId$2,
                          value: newHueValue$2,
                          name: newElement_name$2,
                          elements: newElement_elements$2
                        };
                        return p_.toSpliced(0, 0, newElement$2);
                      }));
        });
  };
  var newShade = function (referenceShadeId, isAfter) {
    var newShadeId = Ulid.ulid();
    Core__Option.mapOr(Core__Array.findIndexOpt(shades, (function (v) {
                return v.id === referenceShadeId;
              })), undefined, (function (shadeIndex) {
            var isFirst = shadeIndex === 0;
            var isLast = shadeIndex === (shades.length - 1 | 0);
            var match = isAfter ? (
                isLast ? [
                    shadeIndex,
                    undefined
                  ] : [
                    shadeIndex,
                    shadeIndex + 1 | 0
                  ]
              ) : (
                isFirst ? [
                    undefined,
                    shadeIndex
                  ] : [
                    shadeIndex - 1 | 0,
                    shadeIndex
                  ]
              );
            var afterIndex = match[1];
            var beforeIndex = match[0];
            if (beforeIndex !== undefined) {
              if (afterIndex !== undefined) {
                setShades(function (s_) {
                      return s_.toSpliced(afterIndex, 0, {
                                  id: newShadeId,
                                  name: "New"
                                });
                    });
                return setPicks(function (p_) {
                            return p_.map(function (hue) {
                                        var b = hue.elements[beforeIndex];
                                        var a = hue.elements[afterIndex];
                                        var match = Color.convert([
                                              hue.value,
                                              b.saturation,
                                              b.lightness
                                            ], Color.OKHSL, Color.OKHSV);
                                        var match$1 = Color.convert([
                                              hue.value,
                                              a.saturation,
                                              a.lightness
                                            ], Color.OKHSL, Color.OKHSV);
                                        var match$2 = Color.convert([
                                              hue.value,
                                              (match[1] + match$1[1]) / 2,
                                              (match[2] + match$1[2]) / 2
                                            ], Color.OKHSV, Color.OKHSL);
                                        var newElement_id = Ulid.ulid();
                                        var newElement_hueId = hue.id;
                                        var newElement_lightness = match$2[2];
                                        var newElement_saturation = match$2[1];
                                        var newElement = {
                                          id: newElement_id,
                                          shadeId: newShadeId,
                                          hueId: newElement_hueId,
                                          lightness: newElement_lightness,
                                          saturation: newElement_saturation
                                        };
                                        return {
                                                id: hue.id,
                                                value: hue.value,
                                                name: hue.name,
                                                elements: hue.elements.toSpliced(afterIndex, 0, newElement)
                                              };
                                      });
                          });
              } else {
                setShades(function (s_) {
                      return s_.toSpliced(beforeIndex + 1 | 0, 0, {
                                  id: newShadeId,
                                  name: "New"
                                });
                    });
                return setPicks(function (p_) {
                            return p_.map(function (hue) {
                                        var b = hue.elements[beforeIndex];
                                        var match = Color.convert([
                                              hue.value,
                                              b.saturation,
                                              b.lightness
                                            ], Color.OKHSL, Color.OKHSV);
                                        var match$1 = Color.convert([
                                              hue.value,
                                              (match[1] + 1) / 2,
                                              match[2] / 2
                                            ], Color.OKHSV, Color.OKHSL);
                                        var newElement_id = Ulid.ulid();
                                        var newElement_hueId = hue.id;
                                        var newElement_lightness = match$1[2];
                                        var newElement_saturation = match$1[1];
                                        var newElement = {
                                          id: newElement_id,
                                          shadeId: newShadeId,
                                          hueId: newElement_hueId,
                                          lightness: newElement_lightness,
                                          saturation: newElement_saturation
                                        };
                                        return {
                                                id: hue.id,
                                                value: hue.value,
                                                name: hue.name,
                                                elements: hue.elements.toSpliced(beforeIndex + 1 | 0, 0, newElement)
                                              };
                                      });
                          });
              }
            } else if (afterIndex !== undefined) {
              setShades(function (s_) {
                    return s_.toSpliced(0, 0, {
                                id: newShadeId,
                                name: "New"
                              });
                  });
              return setPicks(function (p_) {
                          return p_.map(function (hue) {
                                      var a = hue.elements[afterIndex];
                                      var match = Color.convert([
                                            hue.value,
                                            a.saturation,
                                            a.lightness
                                          ], Color.OKHSL, Color.OKHSV);
                                      var match$1 = Color.convert([
                                            hue.value,
                                            match[1] / 2,
                                            (match[2] + 1) / 2
                                          ], Color.OKHSV, Color.OKHSL);
                                      var newElement_id = Ulid.ulid();
                                      var newElement_hueId = hue.id;
                                      var newElement_lightness = match$1[2];
                                      var newElement_saturation = match$1[1];
                                      var newElement = {
                                        id: newElement_id,
                                        shadeId: newShadeId,
                                        hueId: newElement_hueId,
                                        lightness: newElement_lightness,
                                        saturation: newElement_saturation
                                      };
                                      return {
                                              id: hue.id,
                                              value: hue.value,
                                              name: hue.name,
                                              elements: hue.elements.toSpliced(0, 0, newElement)
                                            };
                                    });
                        });
            } else {
              return ;
            }
          }));
  };
  var onDragToGamut = React.useCallback((function (id, x, y) {
          var adjust = function (f) {
            setPicks(function (p_) {
                  return p_.map(function (hue) {
                              return {
                                      id: hue.id,
                                      value: hue.value,
                                      name: hue.name,
                                      elements: hue.elements.map(function (hueElement) {
                                              if (hueElement.id === id) {
                                                return f(hueElement, hue.value);
                                              } else {
                                                return hueElement;
                                              }
                                            }).toSorted(function (a, b) {
                                            return b.lightness - a.lightness;
                                          })
                                    };
                            });
                });
          };
          switch (view) {
            case "View_LC" :
                return adjust(function (el, hue) {
                            var lch_1 = (1 - y) * Common.chromaBound;
                            var lch = [
                              x,
                              lch_1,
                              hue
                            ];
                            if (!Color.isRGBInGamut(Color.convert(lch, Color.OKLCH, Color.sRGB))) {
                              return el;
                            }
                            var match = Color.convert(lch, Color.OKLCH, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match[2],
                                    saturation: match[1]
                                  };
                          });
            case "View_SV" :
                return adjust(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  1 - y,
                                  x
                                ], Color.OKHSV, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match[2],
                                    saturation: x === 0 ? 1 - y : match[1]
                                  };
                          });
            case "View_SL" :
                return adjust(function (el, _hue) {
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: x,
                                    saturation: 1 - y
                                  };
                          });
            
          }
        }), [view]);
  var onDragToX = React.useCallback((function (id, x) {
          var adjust = function (f) {
            setPicks(function (p_) {
                  return p_.map(function (hue) {
                              return {
                                      id: hue.id,
                                      value: hue.value,
                                      name: hue.name,
                                      elements: hue.elements.map(function (hueElement) {
                                              if (hueElement.id === id) {
                                                return f(hueElement, hue.value);
                                              } else {
                                                return hueElement;
                                              }
                                            }).toSorted(function (a, b) {
                                            return b.lightness - a.lightness;
                                          })
                                    };
                            });
                });
          };
          switch (view) {
            case "View_LC" :
                return adjust(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKLCH);
                            var lch_1 = match[1];
                            var lch = [
                              x,
                              lch_1,
                              hue
                            ];
                            if (!Color.isRGBInGamut(Color.convert(lch, Color.OKLCH, Color.sRGB))) {
                              return el;
                            }
                            var match$1 = Color.convert(lch, Color.OKLCH, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: match$1[1]
                                  };
                          });
            case "View_SV" :
                return adjust(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKHSV);
                            var oldS = match[1];
                            var match$1 = Color.convert([
                                  hue,
                                  oldS,
                                  x
                                ], Color.OKHSV, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: el.lightness === 0 ? oldS : match$1[1]
                                  };
                          });
            case "View_SL" :
                return adjust(function (el, _hue) {
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: x,
                                    saturation: el.saturation
                                  };
                          });
            
          }
        }), [view]);
  var onDragToY = React.useCallback((function (id, y) {
          var adjust = function (f) {
            setPicks(function (p_) {
                  return p_.map(function (hue) {
                              return {
                                      id: hue.id,
                                      value: hue.value,
                                      name: hue.name,
                                      elements: hue.elements.map(function (hueElement) {
                                              if (hueElement.id === id) {
                                                return f(hueElement, hue.value);
                                              } else {
                                                return hueElement;
                                              }
                                            }).toSorted(function (a, b) {
                                            return b.lightness - a.lightness;
                                          })
                                    };
                            });
                });
          };
          switch (view) {
            case "View_LC" :
                return adjust(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKLCH);
                            var lch_0 = match[0];
                            var lch_1 = (1 - y) * Common.chromaBound;
                            var lch = [
                              lch_0,
                              lch_1,
                              hue
                            ];
                            if (!Color.isRGBInGamut(Color.convert(lch, Color.OKLCH, Color.sRGB))) {
                              return el;
                            }
                            var match$1 = Color.convert(lch, Color.OKLCH, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: match$1[1]
                                  };
                          });
            case "View_SV" :
                return adjust(function (el, hue) {
                            var match = Color.convert([
                                  hue,
                                  el.saturation,
                                  el.lightness
                                ], Color.OKHSL, Color.OKHSV);
                            var match$1 = Color.convert([
                                  hue,
                                  1 - y,
                                  match[2]
                                ], Color.OKHSV, Color.OKHSL);
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: match$1[2],
                                    saturation: el.lightness === 0 ? 1 - y : match$1[1]
                                  };
                          });
            case "View_SL" :
                return adjust(function (el, _hue) {
                            return {
                                    id: el.id,
                                    shadeId: el.shadeId,
                                    hueId: el.hueId,
                                    lightness: el.lightness,
                                    saturation: 1 - y
                                  };
                          });
            
          }
        }), [view]);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(make, {}),
                              className: "h-12 w-12"
                            }),
                        "Amici Color"
                      ],
                      className: "font-black text-4xl flex flex-row items-center gap-2 pb-4"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: [
                                          "View_LC",
                                          "View_SL",
                                          "View_SV"
                                        ].map(function (v) {
                                            var isSelected = view === v;
                                            return JsxRuntime.jsx("button", {
                                                        children: viewName(v),
                                                        className: [
                                                            "px-2 rounded",
                                                            isSelected ? "bg-blue-600 text-white" : "bg-blue-200"
                                                          ].join(" "),
                                                        onClick: (function (param) {
                                                            setView(function (param) {
                                                                  return v;
                                                                });
                                                          })
                                                      }, viewName(v));
                                          }),
                                      className: "flex flex-row gap-2"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx(ViewGamut.make, {
                                                      hues: picks,
                                                      selectedHue: selectedHue,
                                                      selectedElement: selectedElement,
                                                      view: view,
                                                      setSelectedElement: setSelectedElement,
                                                      onDragTo: onDragToGamut
                                                    }),
                                                JsxRuntime.jsx(YStack.make, {
                                                      hues: picks,
                                                      selectedElement: selectedElement,
                                                      view: view,
                                                      setSelectedElement: setSelectedElement,
                                                      setSelectedHue: setSelectedHue,
                                                      selectedHue: selectedHue,
                                                      onDragTo: onDragToY
                                                    })
                                              ],
                                              className: "flex flex-row"
                                            }),
                                        JsxRuntime.jsx(XStack.make, {
                                              hues: picks,
                                              selectedElement: selectedElement,
                                              view: view,
                                              setSelectedElement: setSelectedElement,
                                              setSelectedHue: setSelectedHue,
                                              onDragTo: onDragToX
                                            })
                                      ],
                                      className: "flex flex-col py-2"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: picks.map(function (pick) {
                                            var onDelete = function () {
                                              setPicks(function (p_) {
                                                    return p_.filter(function (v) {
                                                                return v.id !== pick.id;
                                                              });
                                                  });
                                              setSelectedHue(function (v) {
                                                    return Core__Option.flatMap(v, (function (p) {
                                                                  if (p === pick.id) {
                                                                    return ;
                                                                  } else {
                                                                    return p;
                                                                  }
                                                                }));
                                                  });
                                            };
                                            return JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsxs("div", {
                                                                children: [
                                                                  JsxRuntime.jsx(make$1, {
                                                                        items: [
                                                                          [
                                                                            "Add Row Before",
                                                                            (function () {
                                                                                newHue(pick.id, false);
                                                                              })
                                                                          ],
                                                                          [
                                                                            "Add Row After",
                                                                            (function () {
                                                                                newHue(pick.id, true);
                                                                              })
                                                                          ],
                                                                          [
                                                                            "Delete Row",
                                                                            onDelete
                                                                          ]
                                                                        ]
                                                                      }),
                                                                  JsxRuntime.jsx("input", {
                                                                        className: "w-20 h-5",
                                                                        type: "text",
                                                                        value: pick.name,
                                                                        onChange: (function (e) {
                                                                            var value = e.target.value;
                                                                            setPicks(function (cur) {
                                                                                  return cur.map(function (v) {
                                                                                              if (v.id === pick.id) {
                                                                                                return {
                                                                                                        id: v.id,
                                                                                                        value: v.value,
                                                                                                        name: value,
                                                                                                        elements: v.elements
                                                                                                      };
                                                                                              } else {
                                                                                                return v;
                                                                                              }
                                                                                            });
                                                                                });
                                                                          })
                                                                      })
                                                                ],
                                                                className: "flex-row flex w-full justify-between items-center gap-2 h-full"
                                                              }),
                                                          JsxRuntime.jsx("div", {
                                                                className: "flex flex-row justify-start gap-2 w-full"
                                                              })
                                                        ],
                                                        className: " "
                                                      }, pick.id);
                                          }),
                                      className: "overflow-hidden",
                                      style: {
                                        display: "grid",
                                        gridColumn: "1 / 2",
                                        gridRow: "2 / -1",
                                        gridTemplateColumns: "subgrid",
                                        gridTemplateRows: "subgrid"
                                      }
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: shades.map(function (shade) {
                                            var onDelete = function () {
                                              setPicks(function (p_) {
                                                    return p_.map(function (v) {
                                                                return {
                                                                        id: v.id,
                                                                        value: v.value,
                                                                        name: v.name,
                                                                        elements: v.elements.filter(function (e) {
                                                                              return e.shadeId !== shade.id;
                                                                            })
                                                                      };
                                                              });
                                                  });
                                              setShades(function (s_) {
                                                    return s_.filter(function (v) {
                                                                return v.id !== shade.id;
                                                              });
                                                  });
                                            };
                                            return JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx(make$1, {
                                                                items: [
                                                                  [
                                                                    "Add Column Before",
                                                                    (function () {
                                                                        newShade(shade.id, false);
                                                                      })
                                                                  ],
                                                                  [
                                                                    "Add Column After",
                                                                    (function () {
                                                                        newShade(shade.id, true);
                                                                      })
                                                                  ],
                                                                  [
                                                                    "Delete Column",
                                                                    onDelete
                                                                  ]
                                                                ]
                                                              }),
                                                          JsxRuntime.jsx("input", {
                                                                className: "w-10 h-5",
                                                                type: "text",
                                                                value: shade.name,
                                                                onChange: (function (e) {
                                                                    var value = e.target.value;
                                                                    setShades(function (cur) {
                                                                          return cur.map(function (v) {
                                                                                      if (v.id === shade.id) {
                                                                                        return {
                                                                                                id: v.id,
                                                                                                name: value
                                                                                              };
                                                                                      } else {
                                                                                        return v;
                                                                                      }
                                                                                    });
                                                                        });
                                                                  })
                                                              })
                                                        ],
                                                        className: " flex flex-col gap-2"
                                                      }, shade.id);
                                          }),
                                      className: "overflow-hidden",
                                      style: {
                                        display: "grid",
                                        gridColumn: "2 / -1",
                                        gridRow: "1 / 2",
                                        gridTemplateColumns: "subgrid",
                                        gridTemplateRows: "subgrid"
                                      }
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: Belt_Array.concatMany(picks.map(function (hue) {
                                                return hue.elements.map(function (element) {
                                                            var hex = Color.RGBToHex(Color.convert([
                                                                      hue.value,
                                                                      element.saturation,
                                                                      element.lightness
                                                                    ], Color.OKHSL, Color.sRGB));
                                                            return JsxRuntime.jsx("div", {
                                                                        children: Core__Option.mapOr(selectedElement, false, (function (e) {
                                                                                return e === element.id;
                                                                              })) ? "•" : null,
                                                                        className: "w-12 h-12 max-h-12 max-w-12 flex flex-row items-center justify-center cursor-pointer",
                                                                        style: {
                                                                          backgroundColor: hex
                                                                        },
                                                                        onClick: (function (param) {
                                                                            setSelectedElement(function (param) {
                                                                                  return element.id;
                                                                                });
                                                                            setSelectedHue(function (param) {
                                                                                  return element.hueId;
                                                                                });
                                                                          })
                                                                      }, element.id);
                                                          });
                                              })),
                                      style: {
                                        display: "grid",
                                        gridColumn: "2 / -1",
                                        gridRow: "2 / -1",
                                        gridTemplateColumns: "subgrid",
                                        gridTemplateRows: "subgrid"
                                      }
                                    })
                              ],
                              className: "py-6 w-fit h-fit",
                              style: {
                                display: "grid",
                                gridTemplateColumns: "auto repeat(" + shadeLen.toString() + ", 3rem)",
                                gridTemplateRows: "auto repeat(" + hueLen.toString() + ", 3rem)"
                              }
                            })
                      ],
                      className: "flex flex-row"
                    })
              ]
            });
}

function App(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(App$Palette, {}),
              className: "p-6 min-h-screen bg-white"
            });
}

var make$2 = App;

export {
  make$2 as make,
}
/* make Not a pure module */

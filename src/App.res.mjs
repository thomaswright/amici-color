// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ulid from "ulid";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as OtherJsx from "./other.jsx";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Color from "@texel/color";
import * as JsxRuntime from "react/jsx-runtime";

function mapRange(n, f) {
  return Core__Array.make(n, 0).map(function (param, i) {
              return f(i);
            });
}

function hueToName(hue) {
  if (hue >= 5 && hue < 15) {
    return "rose";
  } else if (hue >= 15 && hue < 25) {
    return "crimson";
  } else if (hue >= 25 && hue < 35) {
    return "red";
  } else if (hue >= 35 && hue < 45) {
    return "vermillion";
  } else if (hue >= 45 && hue < 55) {
    return "persimmon";
  } else if (hue >= 55 && hue < 65) {
    return "orange";
  } else if (hue >= 65 && hue < 75) {
    return "pumpkin";
  } else if (hue >= 75 && hue < 85) {
    return "mango";
  } else if (hue >= 85 && hue < 95) {
    return "amber";
  } else if (hue >= 95 && hue < 105) {
    return "gold";
  } else if (hue >= 105 && hue < 115) {
    return "yellow";
  } else if (hue >= 115 && hue < 125) {
    return "citron";
  } else if (hue >= 125 && hue < 135) {
    return "pear";
  } else if (hue >= 135 && hue < 145) {
    return "chartreuse";
  } else if (hue >= 145 && hue < 155) {
    return "lime";
  } else if (hue >= 155 && hue < 165) {
    return "green";
  } else if (hue >= 165 && hue < 175) {
    return "emerald";
  } else if (hue >= 175 && hue < 185) {
    return "mint";
  } else if (hue >= 185 && hue < 195) {
    return "sea";
  } else if (hue >= 195 && hue < 205) {
    return "teal";
  } else if (hue >= 205 && hue < 215) {
    return "cyan";
  } else if (hue >= 215 && hue < 225) {
    return "pacific";
  } else if (hue >= 225 && hue < 235) {
    return "cerulean";
  } else if (hue >= 235 && hue < 245) {
    return "capri";
  } else if (hue >= 245 && hue < 255) {
    return "sky";
  } else if (hue >= 255 && hue < 265) {
    return "blue";
  } else if (hue >= 265 && hue < 275) {
    return "sapphire";
  } else if (hue >= 275 && hue < 285) {
    return "indigo";
  } else if (hue >= 285 && hue < 295) {
    return "veronica";
  } else if (hue >= 295 && hue < 305) {
    return "violet";
  } else if (hue >= 305 && hue < 315) {
    return "amethyst";
  } else if (hue >= 315 && hue < 325) {
    return "purple";
  } else if (hue >= 325 && hue < 335) {
    return "plum";
  } else if (hue >= 335 && hue < 345) {
    return "fuchsia";
  } else if (hue >= 345 && hue < 355) {
    return "magenta";
  } else if (hue >= 355 || hue < 5) {
    return "pink";
  } else {
    return "?";
  }
}

function updateHueLineCanvas(canvas, ctx) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  for(var x = 0; x <= xMax; ++x){
    var rgb = Color.convert([
          x / xMax * 360,
          1.0,
          1.0
        ], Color.OKHSV, Color.sRGB);
    ctx.fillStyle = Color.RGBToHex(rgb);
    ctx.fillRect(x, 0, 1, yMax);
  }
}

function App$HueLine(props) {
  var canvasRef = React.useRef(null);
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            canvasDom.width = 500;
            canvasDom.height = 20;
            updateHueLineCanvas(canvasDom, context);
          }
        }), [canvasRef.current]);
  return JsxRuntime.jsxs("div", {
              children: [
                props.hues.map(function (hue) {
                      return JsxRuntime.jsx("div", {
                                  className: "bg-black w-2 h-2 absolute ",
                                  style: {
                                    left: (hue / 360 * 500 | 0).toString() + "px"
                                  }
                                });
                    }),
                JsxRuntime.jsx("canvas", {
                      ref: Caml_option.some(canvasRef)
                    })
              ],
              className: "w-fit relative"
            });
}

function App$Palette(props) {
  var match = React.useState(function () {
        var xLen = 5;
        var yLen = 5;
        return mapRange(xLen, (function (x) {
                      var hue = x / xLen * 360;
                      var elements = mapRange(yLen, (function (y) {
                              var s = (y + 1) / yLen;
                              var hex = Color.RGBToHex(Color.convert([
                                        hue,
                                        s,
                                        1.0
                                      ], Color.OKHSV, Color.sRGB));
                              return {
                                      id: Ulid.ulid(),
                                      shadeId: x.toString(),
                                      hex: hex
                                    };
                            }));
                      return {
                              id: Ulid.ulid(),
                              value: hue,
                              name: hueToName(hue),
                              elements: elements
                            };
                    }));
      });
  var setPicks = match[1];
  var match$1 = React.useState(function () {
        return mapRange(5, (function (i) {
                      return {
                              id: Ulid.ulid(),
                              name: Math.imul(i + 1 | 0, 100).toString()
                            };
                    }));
      });
  var setShades = match$1[1];
  var shades = match$1[0];
  var picks = match[0].toSorted(function (a, b) {
        return a.value - b.value;
      });
  var hueLen = picks.length;
  var shadeLen = shades.length;
  var picksFlat = Belt_Array.concatMany(picks.map(function (pick) {
            return pick.elements;
          }));
  var changeHexHueByHSL = function (hex, hue) {
    var match = Color.convert(Color.hexToRGB(hex), Color.sRGB, Color.OKHSL);
    return Color.RGBToHex(Color.convert([
                    hue,
                    match[1],
                    match[2]
                  ], Color.OKHSL, Color.sRGB));
  };
  var makeNewElement = function (copy, left, right) {
    var newValue = (left + right) / 2;
    return {
            id: Ulid.ulid(),
            value: newValue,
            name: hueToName(newValue),
            elements: copy.elements.map(function (v) {
                  return {
                          id: Ulid.ulid(),
                          shadeId: v.shadeId,
                          hex: changeHexHueByHSL(v.hex, newValue)
                        };
                })
          };
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(App$HueLine, {
                      hues: picks.map(function (param) {
                            return param.value;
                          })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("div", {
                                    className: "w-5 h-5 bg-pink-500 rounded-tr-full rounded-tl-full rounded-br-full"
                                  }),
                              style: {
                                gridArea: "addShade"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("button", {
                                    className: "w-5 h-5 bg-blue-500 rounded-bl-full rounded-tl-full rounded-br-full",
                                    onClick: (function (param) {
                                        setPicks(function (p_) {
                                              var lastHue = picks.toReversed()[0];
                                              var $$new = makeNewElement(lastHue, lastHue.value, 360);
                                              return Belt_Array.concatMany([
                                                          p_,
                                                          [$$new]
                                                        ]);
                                            });
                                      })
                                  }),
                              style: {
                                gridArea: "addHue"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: picks.map(function (pick) {
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("button", {
                                                        className: "w-5 h-5 bg-blue-500 rounded-bl-full rounded-tl-full rounded-br-full",
                                                        onClick: (function (param) {
                                                            setPicks(function (p_) {
                                                                  return Core__Array.reduceWithIndex(p_, [], (function (acc, cur, i) {
                                                                                var leftValue = i === 0 ? 0 : p_[i - 1 | 0].value;
                                                                                if (cur.id === pick.id) {
                                                                                  return Belt_Array.concatMany([
                                                                                              acc,
                                                                                              [
                                                                                                makeNewElement(cur, leftValue, cur.value),
                                                                                                cur
                                                                                              ]
                                                                                            ]);
                                                                                } else {
                                                                                  return Belt_Array.concatMany([
                                                                                              acc,
                                                                                              [cur]
                                                                                            ]);
                                                                                }
                                                                              }));
                                                                });
                                                          })
                                                      }),
                                                  JsxRuntime.jsx("input", {
                                                        className: "w-10 h-5",
                                                        type: "text",
                                                        value: pick.name,
                                                        onChange: (function (e) {
                                                            var value = e.target.value;
                                                            setPicks(function (cur) {
                                                                  return cur.map(function (v) {
                                                                              if (v.id === pick.id) {
                                                                                return {
                                                                                        id: v.id,
                                                                                        value: v.value,
                                                                                        name: value,
                                                                                        elements: v.elements
                                                                                      };
                                                                              } else {
                                                                                return v;
                                                                              }
                                                                            });
                                                                });
                                                          })
                                                      })
                                                ],
                                                className: "h-10 w-10"
                                              }, pick.id);
                                  }),
                              style: {
                                display: "grid",
                                gridArea: "yAxis",
                                gridTemplateRows: "repeat(" + shadeLen.toString() + ", 1fr)"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: shades.map(function (shade) {
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("div", {
                                                        className: "w-5 h-5 bg-pink-500 rounded-tr-full rounded-tl-full rounded-br-full"
                                                      }),
                                                  JsxRuntime.jsx("input", {
                                                        className: "w-10 h-5",
                                                        type: "text",
                                                        value: shade.name,
                                                        onChange: (function (e) {
                                                            var value = e.target.value;
                                                            setShades(function (cur) {
                                                                  return cur.map(function (v) {
                                                                              if (v.id === shade.id) {
                                                                                return {
                                                                                        id: v.id,
                                                                                        name: value
                                                                                      };
                                                                              } else {
                                                                                return v;
                                                                              }
                                                                            });
                                                                });
                                                          })
                                                      })
                                                ],
                                                className: "h-10 w-10"
                                              }, shade.id);
                                  }),
                              style: {
                                display: "grid",
                                gridArea: "xAxis",
                                gridTemplateColumns: "repeat(" + shadeLen.toString() + ", 1fr)"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              children: picksFlat.map(function (element) {
                                    return JsxRuntime.jsx("div", {
                                                className: "w-10 h-10",
                                                style: {
                                                  backgroundColor: element.hex
                                                }
                                              }, element.id);
                                  }),
                              style: {
                                display: "grid",
                                gridArea: "main",
                                gridTemplateColumns: "repeat(" + shadeLen.toString() + ", 1fr)",
                                gridTemplateRows: "repeat(" + hueLen.toString() + ", 1fr)"
                              }
                            })
                      ],
                      className: "p-6 w-fit",
                      style: {
                        display: "grid",
                        gridTemplateAreas: "\"... xAxis addShade\" \"yAxis main ...\" \"addHue ... ...\"",
                        gridTemplateColumns: "2.5rem 1fr 2.5rem",
                        gridTemplateRows: "2.5rem 1fr 2.5rem"
                      }
                    })
              ]
            });
}

function App(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(App$Palette, {
                    arr: []
                  }),
              className: "p-6 "
            });
}

var make = App;

export {
  make ,
}
/*  Not a pure module */

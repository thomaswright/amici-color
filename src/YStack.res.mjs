// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function YStack(props) {
  var onDragTo = props.onDragTo;
  var setSelectedHue = props.setSelectedHue;
  var setSelectedElement = props.setSelectedElement;
  var view = props.view;
  var selectedElement = props.selectedElement;
  var isDragging = React.useRef(false);
  var dragPos = React.useRef(undefined);
  var dragId = React.useRef(undefined);
  var gamutEl = React.useRef(null);
  var drag = function (clientY) {
    var match = gamutEl.current;
    var match$1 = dragId.current;
    if (match === null || match === undefined) {
      return ;
    }
    if (match$1 === undefined) {
      return ;
    }
    var gamutRect = match.getBoundingClientRect();
    var gamutY = gamutRect.top;
    var y = Math.min(Math.max(clientY - gamutY | 0, 0), 300);
    onDragTo(match$1, y / 300);
  };
  React.useEffect((function () {
          var onMouseMove = function ($$event) {
            if (isDragging.current) {
              return drag($$event.clientY);
            }
            
          };
          var onTouchMove = function ($$event) {
            if (isDragging.current) {
              return Core__Option.mapOr($$event.touches[0], undefined, (function (touch) {
                            drag(touch.clientY);
                          }));
            }
            
          };
          var onTouchEnd = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          var onMouseUp = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          document.addEventListener("mousemove", onMouseMove);
          document.addEventListener("touchmove", onTouchMove);
          document.addEventListener("touchend", onTouchEnd);
          document.addEventListener("mouseup", onMouseUp);
          return (function () {
                    document.removeEventListener("mousemove", onMouseMove);
                    document.removeEventListener("touchmove", onTouchMove);
                    document.removeEventListener("touchend", onTouchEnd);
                    document.removeEventListener("mouseup", onMouseUp);
                  });
        }), [view]);
  var tmp;
  switch (view) {
    case "View_LC" :
        tmp = "chroma";
        break;
    case "View_SV" :
    case "View_SL" :
        tmp = "saturation";
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: props.hues.map(function (hue) {
                            return JsxRuntime.jsx("div", {
                                        children: hue.elements.map(function (e) {
                                              var hex = Color.RGBToHex(Color.convert([
                                                        hue.value,
                                                        e.saturation,
                                                        e.lightness
                                                      ], Color.OKHSL, Color.sRGB));
                                              var percentage;
                                              switch (view) {
                                                case "View_LC" :
                                                    var match = Color.convert([
                                                          hue.value,
                                                          e.saturation,
                                                          e.lightness
                                                        ], Color.OKHSL, Color.OKLCH);
                                                    percentage = match[1] / Common.chromaBound;
                                                    break;
                                                case "View_SV" :
                                                    var match$1 = Color.convert([
                                                          hue.value,
                                                          e.saturation,
                                                          e.lightness
                                                        ], Color.OKHSL, Color.OKHSV);
                                                    percentage = e.lightness === 0 ? e.saturation : match$1[1];
                                                    break;
                                                case "View_SL" :
                                                    percentage = e.saturation;
                                                    break;
                                                
                                              }
                                              return JsxRuntime.jsx("div", {
                                                          children: Core__Option.mapOr(selectedElement, false, (function (x) {
                                                                  return x === e.id;
                                                                })) ? "â€¢" : null,
                                                          className: "absolute w-5 h-5 border border-black flex flex-col items-center justify-center cursor-pointer select-none",
                                                          style: {
                                                            backgroundColor: hex,
                                                            bottom: (percentage * 300 | 0).toString() + "px",
                                                            transform: "translate(0, 50%)"
                                                          },
                                                          onMouseDown: (function (param) {
                                                              isDragging.current = true;
                                                              dragPos.current = undefined;
                                                              dragId.current = e.id;
                                                              setSelectedElement(function (param) {
                                                                    return e.id;
                                                                  });
                                                              setSelectedHue(function (param) {
                                                                    return hue.id;
                                                                  });
                                                            }),
                                                          onTouchStart: (function (param) {
                                                              isDragging.current = true;
                                                              dragPos.current = undefined;
                                                              dragId.current = e.id;
                                                            })
                                                        }, e.id);
                                            }),
                                        className: "relative w-5"
                                      }, hue.id);
                          }),
                      ref: Caml_option.some(gamutEl),
                      className: "flex flex-row gap-1 px-1 bg-white rounded",
                      style: {
                        height: (300).toString() + "px"
                      }
                    }),
                JsxRuntime.jsx("div", {
                      children: tmp,
                      className: "text-white w-3 font-medium text-center",
                      style: {
                        writingMode: "vertical-lr"
                      }
                    })
              ],
              className: "p-3 bg-black pl-0 flex flex-row"
            });
}

var ySize = 300;

var make = YStack;

export {
  ySize ,
  make ,
}
/* react Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function updateHueLineCanvas(canvas, ctx) {
  var xMax = canvas.width;
  for(var x = 0; x <= xMax; ++x){
    var rgb = Color.convert([
          x / xMax * 360,
          1.0,
          1.0
        ], Color.OKHSV, Color.sRGB);
    ctx.fillStyle = Color.RGBToHex(rgb);
    ctx.fillRect(x, 0, 1, xMax);
  }
}

var xSizeScaled = 300 * window.devicePixelRatio | 0;

var ySizeScaled = 20 * window.devicePixelRatio | 0;

function HueXLine(props) {
  var onDragTo = props.onDragTo;
  var setSelectedHue = props.setSelectedHue;
  var selectedHue = props.selectedHue;
  var canvasRef = React.useRef(null);
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);
            canvasDom.width = xSizeScaled;
            canvasDom.height = ySizeScaled;
            updateHueLineCanvas(canvasDom, context);
          }
        }), [canvasRef.current]);
  var isDragging = React.useRef(false);
  var dragPos = React.useRef(undefined);
  var dragId = React.useRef(undefined);
  var gamutEl = React.useRef(null);
  var drag = function (clientX) {
    var match = gamutEl.current;
    var match$1 = dragId.current;
    if (match === null || match === undefined) {
      return ;
    }
    if (match$1 === undefined) {
      return ;
    }
    var gamutRect = match.getBoundingClientRect();
    var gamutX = gamutRect.left;
    var x = Math.min(Math.max(clientX - gamutX | 0, 0), 300);
    onDragTo(match$1, x / 300);
  };
  React.useEffect((function () {
          var onMouseMove = function ($$event) {
            if (isDragging.current) {
              return drag($$event.clientX);
            }
            
          };
          var onTouchMove = function ($$event) {
            if (isDragging.current) {
              return Core__Option.mapOr($$event.touches[0], undefined, (function (touch) {
                            drag(touch.clientX);
                          }));
            }
            
          };
          var onTouchEnd = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          var onMouseUp = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          document.addEventListener("mousemove", onMouseMove);
          document.addEventListener("touchmove", onTouchMove);
          document.addEventListener("touchend", onTouchEnd);
          document.addEventListener("mouseup", onMouseUp);
          return (function () {
                    document.removeEventListener("mousemove", onMouseMove);
                    document.removeEventListener("touchmove", onTouchMove);
                    document.removeEventListener("touchend", onTouchEnd);
                    document.removeEventListener("mouseup", onMouseUp);
                  });
        }), []);
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: props.hues.map(function (hue) {
                                  var hex = Color.RGBToHex(Color.convert([
                                            hue.value,
                                            1.0,
                                            1.0
                                          ], Color.OKHSV, Color.sRGB));
                                  var isSelected = Core__Option.mapOr(selectedHue, false, (function (s) {
                                          return s === hue.id;
                                        }));
                                  return JsxRuntime.jsx("div", {
                                              children: isSelected ? "â€¢" : null,
                                              className: "absolute w-5 h-5 border border-black flex flex-row items-center justify-center cursor-pointer select-none",
                                              style: {
                                                backgroundColor: hex,
                                                left: (hue.value / 360 * 300 | 0).toString() + "px",
                                                top: "0.25rem",
                                                transform: "translate(-50%, 0)"
                                              },
                                              onMouseDown: (function (param) {
                                                  isDragging.current = true;
                                                  dragPos.current = undefined;
                                                  dragId.current = hue.id;
                                                  setSelectedHue(function (param) {
                                                        return hue.id;
                                                      });
                                                }),
                                              onTouchStart: (function (param) {
                                                  isDragging.current = true;
                                                  dragPos.current = undefined;
                                                  dragId.current = hue.id;
                                                })
                                            }, hue.id);
                                }),
                            className: "h-5 relative w-full"
                          }),
                      JsxRuntime.jsx("canvas", {
                            ref: Caml_option.some(canvasRef),
                            style: {
                              height: (20).toString() + "px",
                              width: (300).toString() + "px"
                            }
                          })
                    ],
                    ref: Caml_option.some(gamutEl),
                    className: "w-fit rounded-sm"
                  }),
              className: "p-5"
            });
}

var xSize = 300;

var ySize = 20;

var make = HueXLine;

export {
  updateHueLineCanvas ,
  xSize ,
  ySize ,
  xSizeScaled ,
  ySizeScaled ,
  make ,
}
/* xSizeScaled Not a pure module */

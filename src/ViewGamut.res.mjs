// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function updateCanvas(canvas, ctx, hue, view) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  for(var x = 0; x <= xMax; ++x){
    for(var y = 0; y <= yMax; ++y){
      var xVal = x / xMax;
      var yVal = y / yMax;
      var rgb;
      switch (view) {
        case "View_LC" :
            rgb = Color.convert([
                  xVal,
                  yVal * Common.chromaBound,
                  hue
                ], Color.OKLCH, Color.sRGB);
            break;
        case "View_SV" :
            rgb = Color.convert([
                  hue,
                  xVal,
                  yVal
                ], Color.OKHSV, Color.sRGB);
            break;
        case "View_SL" :
            rgb = Color.convert([
                  hue,
                  yVal,
                  xVal
                ], Color.OKHSL, Color.sRGB);
            break;
        
      }
      if (Color.isRGBInGamut(rgb)) {
        ctx.fillStyle = Color.RGBToHex(rgb);
        ctx.fillRect(x, yMax - y | 0, 1, 1);
      }
      
    }
  }
}

var xSizeScaled = 300 * window.devicePixelRatio | 0;

var ySizeScaled = 300 * window.devicePixelRatio | 0;

function ViewGamut$CanvasComp(props) {
  var view = props.view;
  var hueObj = props.hueObj;
  console.log("Render Canvas");
  var canvasRef = React.useRef(null);
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            if (hueObj !== undefined) {
              context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);
              canvasDom.width = xSizeScaled;
              canvasDom.height = ySizeScaled;
              updateCanvas(canvasDom, context, hueObj.value, view);
            } else {
              context.clearRect(0, 0, xSizeScaled, ySizeScaled);
            }
          }
        }), [
        view,
        canvasRef.current,
        Core__Option.mapOr(hueObj, 0, (function (v) {
                return v.value;
              }))
      ]);
  return JsxRuntime.jsx("canvas", {
              ref: Caml_option.some(canvasRef),
              style: {
                height: (300).toString() + "px",
                width: (300).toString() + "px"
              }
            });
}

var make = React.memo(ViewGamut$CanvasComp, (function (a, b) {
        if (a.view !== b.view) {
          return false;
        }
        var match = a.hueObj;
        var match$1 = b.hueObj;
        if (match !== undefined) {
          if (match$1 !== undefined && match.id === match$1.id) {
            return match.value === match$1.value;
          } else {
            return false;
          }
        } else {
          return match$1 === undefined;
        }
      }));

var CanvasComp = {
  make: make
};

function ViewGamut(props) {
  var onDragTo = props.onDragTo;
  var setSelectedElement = props.setSelectedElement;
  var view = props.view;
  var selectedElement = props.selectedElement;
  var hues = props.hues;
  var hueObj = Core__Option.flatMap(props.selectedHue, (function (s) {
          return hues.find(function (v) {
                      return v.id === s;
                    });
        }));
  var isDragging = React.useRef(false);
  var dragPos = React.useRef(undefined);
  var dragId = React.useRef(undefined);
  var gamutEl = React.useRef(null);
  var drag = function (clientX, clientY) {
    var match = gamutEl.current;
    var match$1 = dragId.current;
    if (match === null || match === undefined) {
      return ;
    }
    if (match$1 === undefined) {
      return ;
    }
    var gamutRect = match.getBoundingClientRect();
    var gamutX = gamutRect.left;
    var gamutY = gamutRect.top;
    var x = Math.min(Math.max(clientX - gamutX | 0, 0), 300);
    var y = Math.min(Math.max(clientY - gamutY | 0, 0), 300);
    onDragTo(match$1, x / 300, y / 300);
  };
  React.useEffect((function () {
          var handle = function ($$event) {
            if (isDragging.current) {
              return drag($$event.clientX, $$event.clientY);
            }
            
          };
          document.addEventListener("mousemove", handle);
          return (function () {
                    document.removeEventListener("mousemove", handle);
                  });
        }), []);
  React.useEffect((function () {
          var handle = function ($$event) {
            if (isDragging.current) {
              return Core__Option.mapOr($$event.touches[0], undefined, (function (touch) {
                            drag(touch.clientX, touch.clientY);
                          }));
            }
            
          };
          document.addEventListener("touchmove", handle);
          return (function () {
                    document.removeEventListener("touchmove", handle);
                  });
        }), []);
  React.useEffect((function () {
          var handle = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          document.addEventListener("touchend", handle);
          return (function () {
                    document.removeEventListener("touchend", handle);
                  });
        }), []);
  React.useEffect((function () {
          var handle = function (param) {
            isDragging.current = false;
            dragPos.current = undefined;
            dragId.current = undefined;
          };
          document.addEventListener("mouseup", handle);
          return (function () {
                    document.removeEventListener("mouseup", handle);
                  });
        }), []);
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(make, {
                            hueObj: hueObj,
                            view: view
                          }),
                      JsxRuntime.jsx("div", {
                            children: Core__Option.mapOr(hueObj, null, (function (hue) {
                                    return hue.elements.map(function (e) {
                                                var hsl_0 = hue.value;
                                                var hsl_1 = e.saturation;
                                                var hsl_2 = e.lightness;
                                                var hsl = [
                                                  hsl_0,
                                                  hsl_1,
                                                  hsl_2
                                                ];
                                                var hex = Color.RGBToHex(Color.convert(hsl, Color.OKHSL, Color.sRGB));
                                                var match;
                                                switch (view) {
                                                  case "View_LC" :
                                                      var match$1 = Color.convert(hsl, Color.OKHSL, Color.OKLCH);
                                                      match = [
                                                        match$1[0],
                                                        match$1[1] / Common.chromaBound
                                                      ];
                                                      break;
                                                  case "View_SV" :
                                                      var match$2 = Color.convert([
                                                            hue.value,
                                                            e.saturation,
                                                            e.lightness
                                                          ], Color.OKHSL, Color.OKHSV);
                                                      match = [
                                                        match$2[2],
                                                        match$2[1]
                                                      ];
                                                      break;
                                                  case "View_SL" :
                                                      match = [
                                                        e.lightness,
                                                        e.saturation
                                                      ];
                                                      break;
                                                  
                                                }
                                                return JsxRuntime.jsx("div", {
                                                            children: Core__Option.mapOr(selectedElement, false, (function (x) {
                                                                    return x === e.id;
                                                                  })) ? "â€¢" : null,
                                                            className: " select-none absolute w-5 h-5 border border-black flex flex-row items-center justify-center cursor-pointer",
                                                            style: {
                                                              backgroundColor: hex,
                                                              bottom: (match[1] * 300 | 0).toString() + "px",
                                                              left: (match[0] * 300 | 0).toString() + "px",
                                                              transform: "translate(-50%, 50%)"
                                                            },
                                                            onClick: (function (param) {
                                                                setSelectedElement(function (param) {
                                                                      return e.id;
                                                                    });
                                                              }),
                                                            onMouseDown: (function (param) {
                                                                isDragging.current = true;
                                                                dragPos.current = undefined;
                                                                dragId.current = e.id;
                                                              }),
                                                            onTouchStart: (function (param) {
                                                                isDragging.current = true;
                                                                dragPos.current = undefined;
                                                                dragId.current = e.id;
                                                              })
                                                          });
                                              });
                                  })),
                            ref: Caml_option.some(gamutEl),
                            className: "absolute top-0 left-0 bg-transparent rounded-sm w-full h-full"
                          })
                    ],
                    className: " relative"
                  }),
              className: "p-3 bg-black"
            });
}

var xSize = 300;

var ySize = 300;

var make$1 = ViewGamut;

export {
  updateCanvas ,
  xSize ,
  ySize ,
  xSizeScaled ,
  ySizeScaled ,
  CanvasComp ,
  make$1 as make,
}
/* xSizeScaled Not a pure module */
